#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D Sampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform vec3 LightColor;
uniform float LightPower;
uniform vec3 Ambient = vec3(0.1, 0.1, 0.1);
uniform vec3 Specular = vec3(0.3, 0.3, 0.3);
uniform float Shininess = 5;

bool directional = false;

void main()
{
	// Material properties
	vec3 MaterialDiffuseColor = texture(Sampler, UV).rgb;
	vec3 MaterialAmbientColor = Ambient * MaterialDiffuseColor;

	// Normal of the computed fragment, in camera space
	vec3 normal = normalize(Normal_cameraspace);

    float attenuation = 1.0;
    vec3 surfaceToLight;

    if(directional)
    {
        surfaceToLight = normalize(LightPosition_worldspace);
        attenuation = 1.0;
    }
    else
    {
        // Direction of the light (from the fragment to the light)
        surfaceToLight = normalize(LightDirection_cameraspace);

        // Distance to the light
        float distanceToLight = length(LightPosition_worldspace - Position_worldspace);

        attenuation = 1.0 / (1.0 + pow(distanceToLight, 2));
    }

	// Diffuse Coefficient
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float diffuseCoefficient = clamp(dot(normal, surfaceToLight), 0, 1);

	vec3 diffuse = MaterialDiffuseColor * LightColor * LightPower * diffuseCoefficient;

	// Eye vector (towards the camera)
	vec3 surfaceToCamera = normalize(EyeDirection_cameraspace);

	// Direction in which the triangle reflects the light
	vec3 reflectDirection = reflect(-surfaceToLight, normal);

	// Specular Coefficient
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float specularCoefficient = clamp(dot(surfaceToCamera, reflectDirection), 0, 1);

	vec3 specular = Specular * LightColor * LightPower * pow(specularCoefficient, Shininess);

	color = MaterialAmbientColor + attenuation * (diffuse);
}